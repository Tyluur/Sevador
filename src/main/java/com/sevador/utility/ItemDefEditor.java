package com.sevador.utility;

import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import net.burtleburtle.cache.Cache;
import net.burtleburtle.cache.format.ItemDefinition;

import com.sevador.game.node.player.Equipment;

/**
 * @author Stephen
 */
public class ItemDefEditor extends javax.swing.JFrame {

	private static final long serialVersionUID = 253993538657219658L;
	private DefaultMutableTreeNode node = new DefaultMutableTreeNode("Items");
	private DefaultTreeModel treeModel = new DefaultTreeModel(node);
	//1511 - 1522, 434 - 454, 47 - 73, 839 - 862
	static final int[] IGNORE = new int[]{};

	/**
	 * Creates new form ItemDefEditor
	 */
	public ItemDefEditor() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			Cache.init();
			ItemDefinition.init();
			for (int i = 0; i < Cache.getAmountOfItems(); i++) {
				node.add(new DefaultMutableTreeNode(i));
			}
			initComponents();
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("all")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		contentPanel = new javax.swing.JPanel();
		itemImagePanel = new javax.swing.JPanel();
		itemImage = new javax.swing.JLabel();
		pictureLabel = new javax.swing.JLabel();
		headerSeparator = new javax.swing.JSeparator();
		idLabel = new javax.swing.JLabel();
		equipIdLabel = new javax.swing.JLabel();
		equipIdField = new javax.swing.JTextField();
		renderIdLabel = new javax.swing.JLabel();
		renderIdField = new javax.swing.JTextField();
		defForLabel = new javax.swing.JLabel();
		extraDefsPanel = new javax.swing.JPanel();
		noExtraDefsPanel = new javax.swing.JPanel();
		addExtraDefsButton = new javax.swing.JButton();
		extraDefsScroll = new javax.swing.JScrollPane();
		extraDefsEditPanel = new javax.swing.JPanel();
		examineLabel = new javax.swing.JLabel();
		examineField = new javax.swing.JTextField();
		weightField = new javax.swing.JTextField();
		weightLabel = new javax.swing.JLabel();
		slotLabel = new javax.swing.JLabel();
		slotField = new javax.swing.JTextField();
		tradeableLabel = new javax.swing.JLabel();
		tradeableCombo = new javax.swing.JComboBox();
		speedLabel = new javax.swing.JLabel();
		speedField = new javax.swing.JTextField();
		bonusPanel = new javax.swing.JPanel();
		bonusScroll = new javax.swing.JScrollPane();
		bonusTable = new javax.swing.JTable();
		highAlchLabel = new javax.swing.JLabel();
		highAlchField = new javax.swing.JTextField();
		lowAlchLabel = new javax.swing.JLabel();
		lowAlchField = new javax.swing.JTextField();
		storeLabel = new javax.swing.JLabel();
		currencyPriceField = new javax.swing.JTextField();
		exchangeLabel = new javax.swing.JLabel();
		exchangePriceField = new javax.swing.JTextField();
		stackableLabel = new javax.swing.JLabel();
		notedLabel = new javax.swing.JLabel();
		actionsPanel = new javax.swing.JPanel();
		saveButton = new javax.swing.JButton();
		saveRepackButton = new javax.swing.JButton();
		repackButton = new javax.swing.JButton();
		skillReqPanel = new javax.swing.JPanel();
		noSkillReq = new javax.swing.JPanel();
		addSkillReqButton = new javax.swing.JButton();
		skillReqOption = new javax.swing.JPanel();
		skillReqScroll = new javax.swing.JScrollPane();
		skillReqTable = new javax.swing.JTable();
		deleteButton = new javax.swing.JButton();
		addNew = new javax.swing.JButton();
		stackableCombo = new javax.swing.JComboBox();
		notedCombo = new javax.swing.JComboBox();
		nameField = new javax.swing.JTextField();
		nameLabel = new javax.swing.JLabel();
		panelSeparator = new javax.swing.JSeparator();
		itemIdsPanel = new javax.swing.JPanel();
		searchIdField = new javax.swing.JTextField();
		seachIdLabel = new javax.swing.JLabel();
		searchNameField = new javax.swing.JTextField();
		searchNameLabel = new javax.swing.JLabel();
		treeScroller = new javax.swing.JScrollPane();
		itemTree = new javax.swing.JTree();
		frameMenuBar = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		dumpDefs = new javax.swing.JMenuItem();
		genStorePricesItem = new javax.swing.JMenuItem();
		setItemNamesButton = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setIconImage(new javax.swing.ImageIcon("./data/tools/icon.png").getImage());
		setTitle("Dementhium Item Editor");

		itemImagePanel.setBackground(new java.awt.Color(83, 59, 35));

		itemImage.setBackground(new java.awt.Color(255, 255, 255));
		itemImage.setForeground(new java.awt.Color(255, 255, 255));

		javax.swing.GroupLayout itemImagePanelLayout = new javax.swing.GroupLayout(itemImagePanel);
		itemImagePanel.setLayout(itemImagePanelLayout);
		itemImagePanelLayout.setHorizontalGroup(
				itemImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemImagePanelLayout.createSequentialGroup()
						.addContainerGap(35, Short.MAX_VALUE)
						.addComponent(itemImage, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(28, 28, 28))
				);
		itemImagePanelLayout.setVerticalGroup(
				itemImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(itemImagePanelLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(itemImage, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		pictureLabel.setText("Picture:");

		idLabel.setFont(new java.awt.Font("Tahoma", 0, 14));

		equipIdLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		equipIdLabel.setText("Equip ID:");

		renderIdLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		renderIdLabel.setText("Render ID:");

		defForLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
		defForLabel.setText("Definitions for: ");

		extraDefsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Extra Definitions"));
		extraDefsPanel.setLayout(new java.awt.CardLayout());

		addExtraDefsButton.setText("Add Extra Defs");
		addExtraDefsButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addExtraDefsButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout noExtraDefsPanelLayout = new javax.swing.GroupLayout(noExtraDefsPanel);
		noExtraDefsPanel.setLayout(noExtraDefsPanelLayout);
		noExtraDefsPanelLayout.setHorizontalGroup(
				noExtraDefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(noExtraDefsPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(addExtraDefsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
						.addContainerGap())
				);
		noExtraDefsPanelLayout.setVerticalGroup(
				noExtraDefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, noExtraDefsPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(addExtraDefsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
						.addContainerGap())
				);

		extraDefsPanel.add(noExtraDefsPanel, "None");

		extraDefsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		examineLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		examineLabel.setText("Examine:");

		examineField.setFont(new java.awt.Font("Tahoma", 0, 10));

		weightField.setFont(new java.awt.Font("Tahoma", 0, 10));

		weightLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		weightLabel.setText("Weight:");

		slotLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		slotLabel.setText("Slot:");

		slotField.setFont(new java.awt.Font("Tahoma", 0, 10));

		tradeableLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		tradeableLabel.setText("Tradeable:");

		tradeableCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"true", "false"}));

		speedLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		speedLabel.setText("Speed:");

		bonusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bonuses"));

		bonusScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

		bonusTable.setAutoCreateRowSorter(true);
		bonusTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][]{
						{null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
				},
				new String[]{
						"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14"
				}
				) {
			/**
			 *
			 */
			private static final long serialVersionUID = 1L;
			Class[] types = new Class[]{
					java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
			};

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});
		bonusTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		bonusScroll.setViewportView(bonusTable);

		javax.swing.GroupLayout bonusPanelLayout = new javax.swing.GroupLayout(bonusPanel);
		bonusPanel.setLayout(bonusPanelLayout);
		bonusPanelLayout.setHorizontalGroup(
				bonusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(bonusPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(bonusScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
						.addContainerGap())
				);
		bonusPanelLayout.setVerticalGroup(
				bonusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(bonusPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(bonusScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
				);

		highAlchLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		highAlchLabel.setText("High Alch:");

		highAlchField.setFont(new java.awt.Font("Tahoma", 0, 10));

		lowAlchLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		lowAlchLabel.setText("Low Alch:");

		lowAlchField.setFont(new java.awt.Font("Tahoma", 0, 10));

		storeLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		storeLabel.setText("Currency $:");

		currencyPriceField.setFont(new java.awt.Font("Tahoma", 0, 10));

		exchangeLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		exchangeLabel.setText("Exchange $:");

		exchangePriceField.setFont(new java.awt.Font("Tahoma", 0, 10));

		javax.swing.GroupLayout extraDefsEditPanelLayout = new javax.swing.GroupLayout(extraDefsEditPanel);
		extraDefsEditPanel.setLayout(extraDefsEditPanelLayout);
		extraDefsEditPanelLayout.setHorizontalGroup(
				extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(bonusPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
										.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
												.addComponent(speedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
												.addComponent(tradeableLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(tradeableCombo, 0, 179, Short.MAX_VALUE)
														.addComponent(speedField, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
														.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																.addComponent(slotLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(36, 36, 36)
																.addComponent(slotField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
																.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																		.addComponent(weightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(17, 17, 17)
																		.addComponent(weightField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
																		.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																				.addComponent(examineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addGap(12, 12, 12)
																				.addComponent(examineField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
																				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extraDefsEditPanelLayout.createSequentialGroup()
																						.addGap(1, 1, 1)
																						.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																								.addComponent(highAlchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addComponent(lowAlchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addComponent(storeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addComponent(exchangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
																								.addGap(3, 3, 3)
																								.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																										.addComponent(exchangePriceField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
																										.addComponent(currencyPriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
																										.addComponent(lowAlchField, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
																										.addComponent(highAlchField, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))))
																										.addContainerGap())
				);
		extraDefsEditPanelLayout.setVerticalGroup(
				extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
										.addGap(2, 2, 2)
										.addComponent(examineLabel))
										.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(examineField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addGap(7, 7, 7)
												.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
														.addComponent(weightLabel, javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(weightField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																.addGap(7, 7, 7)
																.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																		.addComponent(slotLabel, javax.swing.GroupLayout.Alignment.TRAILING)
																		.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(slotField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																				.addGap(13, 13, 13)
																				.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																						.addComponent(tradeableLabel, javax.swing.GroupLayout.Alignment.TRAILING)
																						.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																								.addComponent(tradeableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																								.addGap(7, 7, 7)
																								.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																										.addComponent(speedLabel, javax.swing.GroupLayout.Alignment.TRAILING)
																										.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																												.addComponent(speedField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																												.addComponent(bonusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																												.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																														.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																																.addGap(2, 2, 2)
																																.addComponent(highAlchLabel))
																																.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																																		.addComponent(highAlchField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																																		.addGap(8, 8, 8)
																																		.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																																				.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																																						.addGap(2, 2, 2)
																																						.addComponent(lowAlchLabel))
																																						.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																																								.addComponent(lowAlchField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																																								.addGap(8, 8, 8)
																																								.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																																										.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																																												.addGap(2, 2, 2)
																																												.addComponent(storeLabel))
																																												.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																																														.addComponent(currencyPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																																														.addGap(8, 8, 8)
																																														.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																																																.addGroup(extraDefsEditPanelLayout.createSequentialGroup()
																																																		.addGap(2, 2, 2)
																																																		.addComponent(exchangeLabel))
																																																		.addGroup(extraDefsEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																																																				.addComponent(exchangePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
																																																				.addGap(11, 11, 11))
				);

		extraDefsScroll.setViewportView(extraDefsEditPanel);

		extraDefsPanel.add(extraDefsScroll, "Extra");

		stackableLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		stackableLabel.setText("Stackable:");

		notedLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		notedLabel.setText("Noted:");

		actionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));

		saveButton.setText("Save Item");
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});

		saveRepackButton.setText("Save & Repack");
		saveRepackButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveRepackButtonActionPerformed(evt);
			}
		});

		repackButton.setText("Repack");
		repackButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				repackButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout actionsPanelLayout = new javax.swing.GroupLayout(actionsPanel);
		actionsPanel.setLayout(actionsPanelLayout);
		actionsPanelLayout.setHorizontalGroup(
				actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(actionsPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
								.addComponent(saveRepackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(repackButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
				);
		actionsPanelLayout.setVerticalGroup(
				actionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(actionsPanelLayout.createSequentialGroup()
						.addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(saveRepackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(repackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(133, Short.MAX_VALUE))
				);

		skillReqPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Skill Requirements"));
		skillReqPanel.setLayout(new java.awt.CardLayout());

		addSkillReqButton.setText("Add Skill Requirements");
		addSkillReqButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addSkillReqButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout noSkillReqLayout = new javax.swing.GroupLayout(noSkillReq);
		noSkillReq.setLayout(noSkillReqLayout);
		noSkillReqLayout.setHorizontalGroup(
				noSkillReqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(noSkillReqLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(addSkillReqButton, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
						.addContainerGap())
				);
		noSkillReqLayout.setVerticalGroup(
				noSkillReqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(noSkillReqLayout.createSequentialGroup()
						.addGap(40, 40, 40)
						.addComponent(addSkillReqButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGap(86, 86, 86))
				);

		skillReqPanel.add(noSkillReq, "None");

		skillReqScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		skillReqScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

		skillReqTable.setAutoCreateRowSorter(true);
		skillReqTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][]{

				},
				new String[]{

				}
				));
		skillReqTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		skillReqTable.setColumnSelectionAllowed(true);
		skillReqTable.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				skillReqTableKeyTyped(evt);
			}
		});
		skillReqScroll.setViewportView(skillReqTable);

		deleteButton.setText("Delete Selected");
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}
		});

		addNew.setText("Add New");
		addNew.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addNewActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout skillReqOptionLayout = new javax.swing.GroupLayout(skillReqOption);
		skillReqOption.setLayout(skillReqOptionLayout);
		skillReqOptionLayout.setHorizontalGroup(
				skillReqOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(skillReqOptionLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(skillReqOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(skillReqScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
								.addGroup(skillReqOptionLayout.createSequentialGroup()
										.addComponent(deleteButton)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
										.addComponent(addNew)))
										.addContainerGap())
				);
		skillReqOptionLayout.setVerticalGroup(
				skillReqOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(skillReqOptionLayout.createSequentialGroup()
						.addComponent(skillReqScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(skillReqOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(deleteButton)
								.addComponent(addNew))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		skillReqPanel.add(skillReqOption, "Requires");

		stackableCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"true", "false"}));

		notedCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"true", "false"}));

		nameField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				nameFieldActionPerformed(evt);
			}
		});

		nameLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
		nameLabel.setText("Name:");

		javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
		contentPanel.setLayout(contentPanelLayout);
		contentPanelLayout.setHorizontalGroup(
				contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(headerSeparator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
								.addGroup(javax.swing.GroupLayout.Alignment.LEADING, contentPanelLayout.createSequentialGroup()
										.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(extraDefsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
												.addComponent(skillReqPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
														.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																.addComponent(stackableLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
																.addComponent(notedLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(notedCombo, 0, 214, Short.MAX_VALUE)
																		.addComponent(stackableCombo, 0, 0, Short.MAX_VALUE)))
																		.addGroup(contentPanelLayout.createSequentialGroup()
																				.addGap(10, 10, 10)
																				.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
																								.addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addComponent(equipIdLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
																								.addComponent(renderIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																										.addComponent(renderIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
																										.addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
																										.addComponent(equipIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))))
																										.addGap(28, 28, 28)
																										.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																												.addComponent(actionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																												.addGroup(contentPanelLayout.createSequentialGroup()
																														.addComponent(pictureLabel)
																														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE))
																														.addComponent(itemImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
																														.addGroup(javax.swing.GroupLayout.Alignment.LEADING, contentPanelLayout.createSequentialGroup()
																																.addComponent(defForLabel)
																																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																.addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
																																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192, Short.MAX_VALUE)))
																																.addContainerGap())
				);
		contentPanelLayout.setVerticalGroup(
				contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(contentPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(defForLabel)
								.addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(headerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(contentPanelLayout.createSequentialGroup()
												.addComponent(pictureLabel)
												.addGap(6, 6, 6)
												.addComponent(itemImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(actionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addGroup(contentPanelLayout.createSequentialGroup()
														.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(contentPanelLayout.createSequentialGroup()
																		.addGap(5, 5, 5)
																		.addComponent(nameLabel))
																		.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
																						.addComponent(equipIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(equipIdLabel))
																						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																						.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
																								.addComponent(renderIdLabel)
																								.addComponent(renderIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(extraDefsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																								.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																										.addComponent(stackableLabel)
																										.addComponent(stackableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																										.addGap(12, 12, 12)
																										.addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																												.addComponent(notedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
																												.addComponent(notedCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
																												.addGap(18, 18, 18)
																												.addComponent(skillReqPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
																												.addContainerGap())
				);

		panelSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

		searchIdField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchIdFieldActionPerformed(evt);
			}
		});
		searchIdField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				searchIdFieldKeyTyped(evt);
			}
		});

		seachIdLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
		seachIdLabel.setText("Search (id):");

		searchNameField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchNameFieldActionPerformed(evt);
			}
		});

		searchNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
		searchNameLabel.setText("Search (name):");

		itemTree.setModel(treeModel);
		itemTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
			public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
				itemTreeValueChanged(evt);
			}
		});
		treeScroller.setViewportView(itemTree);

		javax.swing.GroupLayout itemIdsPanelLayout = new javax.swing.GroupLayout(itemIdsPanel);
		itemIdsPanel.setLayout(itemIdsPanelLayout);
		itemIdsPanelLayout.setHorizontalGroup(
				itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemIdsPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(treeScroller, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
								.addGroup(itemIdsPanelLayout.createSequentialGroup()
										.addGroup(itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(seachIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(searchNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(searchNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
														.addComponent(searchIdField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))))
														.addContainerGap())
				);
		itemIdsPanelLayout.setVerticalGroup(
				itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(itemIdsPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(treeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(searchIdField)
								.addComponent(seachIdLabel))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(itemIdsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(searchNameField)
										.addComponent(searchNameLabel))
										.addContainerGap())
				);

		fileMenu.setText("File");

		dumpDefs.setText("Dump Definitions");
		dumpDefs.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dumpDefsActionPerformed(evt);
			}
		});
		fileMenu.add(dumpDefs);

		genStorePricesItem.setText("Generate Store Prices");
		genStorePricesItem.setToolTipText("THIS DOESN'T DUMP FROM WEBSITE, JUST TAKES EXCHANGE PRICE * 1.5!");
		genStorePricesItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				genStorePricesItemActionPerformed(evt);
			}
		});
		fileMenu.add(genStorePricesItem);

		setItemNamesButton.setText("Set Item Names");
		setItemNamesButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				setItemNamesButtonActionPerformed(evt);
			}
		});
		fileMenu.add(setItemNamesButton);

		frameMenuBar.add(fileMenu);

		setJMenuBar(frameMenuBar);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(itemIdsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(panelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(contentPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(panelSeparator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
								.addComponent(itemIdsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap())
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	public DefaultMutableTreeNode searchNode(String nodeStr) {
		DefaultMutableTreeNode nodeToSearch = null;
		Enumeration<?> e = node.breadthFirstEnumeration();
		while (e.hasMoreElements()) {
			nodeToSearch = (DefaultMutableTreeNode) e.nextElement();
			if (nodeStr.equals(nodeToSearch.getUserObject().toString())) {
				return nodeToSearch;
			}
		}
		return null;
	}

	private void searchIdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIdFieldActionPerformed
		try {
			DefaultMutableTreeNode n = searchNode(searchIdField.getText());
			TreePath path = new TreePath(treeModel.getPathToRoot(n));
			itemTree.scrollPathToVisible(path);
			itemTree.setSelectionPath(path);
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Could not find the item.");
		}
	}//GEN-LAST:event_searchIdFieldActionPerformed

	private void searchIdFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchIdFieldKeyTyped
	}//GEN-LAST:event_searchIdFieldKeyTyped

	private void searchNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNameFieldActionPerformed
		try {
			for (int i = 0; i < Cache.getAmountOfItems(); i++) {
				if (ItemDefinition.forId(i).getName().toLowerCase().contains(searchNameField.getText().toLowerCase())) {
					DefaultMutableTreeNode n = searchNode(Integer.toString(i));
					TreePath path = new TreePath(treeModel.getPathToRoot(n));
					itemTree.scrollPathToVisible(path);
					itemTree.setSelectionPath(path);
					break;
				}
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Could not find the item.");
		}
	}//GEN-LAST:event_searchNameFieldActionPerformed

	private void itemTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_itemTreeValueChanged
		try {
			int id = Integer.parseInt(itemTree.getLastSelectedPathComponent().toString());
			if (id > 0 && Cache.getAmountOfItems() > id) {
				loadItem(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()));
			}
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_itemTreeValueChanged

	private void saveRepackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRepackButtonActionPerformed
		saveItem(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()), true);
	}//GEN-LAST:event_saveRepackButtonActionPerformed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		saveItem(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()), false);
	}//GEN-LAST:event_saveButtonActionPerformed

	@SuppressWarnings("unused")
	private void dumpDefsActionPerformed(java.awt.event.ActionEvent evt) {
		//	for (int i = 110; i < ItemDefinition.MAX_SIZE; i++) {
		int i = Integer.parseInt(itemTree.getLastSelectedPathComponent().toString());
		System.out.println(i);
		boolean tradeAble = false;
		boolean equipable = false;
		boolean hasExamine = false;
		boolean hasWeight = false;
		boolean stackable = false;
		boolean highAlch = false;
		boolean isStackable = false;
		boolean isEquipable = false;
		boolean isTradeAble = false;
		boolean hasBonus = false;
		boolean lowAlch = false;
		boolean exchange = false;
		String examine = null;
		double weight = 0;
		int highAlchPrice = 0;
		int lowAlchPrice = 0;
		int exchangePrice = 0;
		int bonus[] = new int[15];
		int[] absorption = new int[3];
		boolean[] hasSlot = new boolean[2];
		int bonusCount = 0;
		int absorbIndex = 0;
		int equipSlot = 0;
		String s;
		//1511 - 1522, 434 - 454, 47 - 73, 839 - 862
		// if ((i >= 1511 && i <= 1522) || (i >= 434 && i <= 454) || (i >= 47 && i <= 73) || (i >= 839 && i <= 862)) {
		//      System.out.println(i);
		//      continue;
		//  }
		ItemDefinition def = ItemDefinition.forId(i);
		try {
			final InputStream instr = new URL("http://runescape.wikia.com/wiki/" + def.getName().replaceAll(" ", "_")).openStream();
			final BufferedReader in = new BufferedReader(new InputStreamReader(instr));
			while ((s = in.readLine()) != null) {
//				if (s.contains("<th scope=\"row\">Current guide price:</th>")) {
//					exchange = true;
//				} else if (exchange) {
//					exchangePrice = (Misc.stringToAmount(s.replace("<td>", "").replace("</td>", "")));
//				}
				if (hasBonus) {
					if (s.contains("colspan=\"2\" width=\"30\" align=\"center\">") || s.contains("colspan=\"3\" width=\"45\" align=\"center\">")) {
						try {
							bonus[bonusCount] = Integer.parseInt(s.substring(s.indexOf("align=\"center\">") + "align=\"center\">".length()).replace("%", "").replace("+", ""));
							if (s.contains("-"))
								bonus[bonusCount] = -bonus[bonusCount];
							bonusCount++;
						} catch (Exception e) {
							continue;
						}
					}
				}
				if (s.contains("<td colspan=\"4\" width=\"60\" align=\"center\">")) {
					try {
						absorption[absorbIndex] = Integer.valueOf((s.substring
								(s.indexOf("<td colspan=\"4\" width=\"60\" align=\"center\">")
										+ "<td colspan=\"4\" width=\"60\" align=\"center\">".length())).replaceAll("%", ""));
						absorbIndex++;
					} catch (Exception ex) {
						absorption[absorbIndex] = 0;
						absorbIndex++;
					}
				}
				if (stackable) {
					isStackable = s.substring("</th><td> ".length()).equals("Yes");
					stackable = false;
				}
				if (hasExamine) {
					examine = s.substring("</th><td> ".length());
					hasExamine = false;
				}
				if (hasWeight) {
					try {
						weight = Double.parseDouble(s.substring("</th><td> ".length(), s.indexOf("&")));
						hasWeight = false;
					} catch (NumberFormatException e) {
						weight = 0.0;
						hasWeight = false;
					}
				}
				if (tradeAble) {
					isTradeAble = s.substring("</th><td> ".length()).contains("Yes");
					tradeAble = false;
				}
				if (highAlch) {
					try {
						highAlchPrice = Integer.parseInt(s.substring("</th><td> ".length(), s.indexOf("&")).replace(",", ""));
						highAlch = false;
					} catch (Exception e) {
						highAlchPrice = 0;
						highAlch = false;
					}
				}
				if (lowAlch) {
					try {
						lowAlchPrice = Integer.parseInt(s.substring("</th><td> ".length(), s.indexOf("&")).replace(",", ""));
						lowAlch = false;
					} catch (Exception e) {
						lowAlchPrice = 0;
						lowAlch = false;
					}
				}
				if (exchange) {
					try {
						exchangePrice = Integer.parseInt(s.substring("</th><td> ".length(), s.indexOf("&")).replace(",", ""));
						exchange = false;
					} catch (Exception e) {
						exchangePrice = 0;
						exchange = false;
					}
				}
				if (equipable) {
					isEquipable = s.substring("</th><td> ".length()).equals("Yes");
					equipable = false;
				}
				if (s.contains("Tradeable</a>?")) {
					tradeAble = true;
				}
				if (s.contains("Stacks</a>?")) {
					stackable = true;
				}
				if (s.contains("<th nowrap=\"nowrap\"><a href=\"/wiki/High_Level_Alchemy\" title=\"High Level Alchemy\">High Alchemy</a>")) {
					highAlch = true;
				}
				if (s.contains("<th nowrap=\"nowrap\"><a href=\"/wiki/Low_Level_Alchemy\" title=\"Low Level Alchemy\">Low Alchemy</a>")) {
					lowAlch = true;
				}
				if (s.contains("<th nowrap=\"nowrap\"><a href=\"/wiki/Prices#Grand_Exchange_Price\" title=\"Prices\">Exchange price</a>")) {
					exchange = true;
				}
				if (s.contains("<th nowrap=\"nowrap\"><a href=\"/wiki/Equipment\" title=\"Equipment\">Equipable</a>?")) {
					equipable = true;
				}
				if (s.contains("<th nowrap=\"nowrap\"><a href=\"/wiki/Examine\" title=\"Examine\">Examine</a>")) {
					hasExamine = true;
				}
				if (s.contains("<th nowrap=\"nowrap\"><a href=\"/wiki/Weight\" title=\"Weight\">Weight</a>")) {
					hasWeight = true;
				}
				if (isEquipable) {
					if (s.contains("title=\"Equipment Stats\">Bonuses</a><br />")) {
						hasBonus = true;
					}
				}
				if (s.contains("src=\"http://images2.wikia.nocookie.net/__cb20111217070838/runescape/images/5/51/Attack-icon.png\" width=\"21\" height=\"21\" /></a></span>")) {
					hasSlot[0] = true;
				} else if (hasSlot[0]) {
					String equipSlotString = s.substring(18, s.indexOf("title") - 2).toLowerCase();
					if (equipSlotString.contains("weapon")) {
						equipSlot = Equipment.SLOT_WEAPON;
					} else if (equipSlotString.contains("weapon")) {
						equipSlot = Equipment.SLOT_WEAPON;
					} else if (equipSlotString.contains("head")) {
						equipSlot = Equipment.SLOT_HAT;
					} else if (equipSlotString.contains("cape")) {
						equipSlot = Equipment.SLOT_CAPE;
					} else if (equipSlotString.contains("neck")) {
						equipSlot = Equipment.SLOT_AMULET;
					} else if (equipSlotString.contains("ammunition")) {
						equipSlot = Equipment.SLOT_ARROWS;
					} else if (equipSlotString.contains("body")) {
						equipSlot = Equipment.SLOT_CHEST;
					} else if (equipSlotString.contains("shield")) {
						equipSlot = Equipment.SLOT_SHIELD;
					} else if (equipSlotString.contains("hand")) {
						equipSlot = Equipment.SLOT_HANDS;
					} else if (equipSlotString.contains("foot")) {
						equipSlot = Equipment.SLOT_FEET;
					} else if (equipSlotString.contains("ring")) {
						equipSlot = Equipment.SLOT_RING;
					}  else if (equipSlotString.contains("two-handed")) {
						equipSlot = Equipment.SLOT_WEAPON;

					}
					hasSlot[0] = false;
				}

			}
			//def.setBonus(bonus);
			def.setExamine(examine);
			def.setTradable(isTradeAble);
			def.setWeight(weight);
			//def.setStackable(isStackable);
			def.setLowAlch(lowAlchPrice);
			def.setHighAlch(highAlchPrice);
			//TODO: def.setExchangePrice(exchangePrice);
			def.setExtraDefinitions(true);
			//def.setAbsorptionBonus(absorption);
			def.setEquipmentSlot(equipSlot);
			this.loadItem(def.getId());
					//}
	} catch (Exception e) {
		e.printStackTrace();
	}
	}


	private void addExtraDefsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExtraDefsButtonActionPerformed
		ItemDefinition id = ItemDefinition.forId(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()));
		id.setExtraDefinitions(true);
		id.setExamine("It's a " + id.getName() + ".");
		id.setWeight(0.0);
		id.setEquipmentSlot(id.getEquipmentSlot());
		id.setTradable(true);
		id.setAttackSpeed(0);
		//id.setBonus(new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
		id.setHighAlch(0);
		id.setLowAlch(0);
		id.setStorePrice(0);
		//TODO: id.setExchangePrice(0);
		//id.setStackable(false);
		id.setNoted(false);
		try {
			loadItem(id.getId());
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_addExtraDefsButtonActionPerformed

	private void repackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repackButtonActionPerformed
		try {
			repackFile();
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_repackButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		ItemDefinition id = ItemDefinition.forId(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()));
		id.getCacheDefinition().itemRequirements.remove(skillReqTable.getSelectedColumn());
		//TODO: id.getSkillRequirementId().remove(skillReqTable.getSelectedColumn());
		//TODO: id.getSkillRequirementLvl().remove(skillReqTable.getSelectedColumn());
		saveItem(id.getId(), false);
		try {
			loadItem(id.getId());
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
		ItemDefinition id = ItemDefinition.forId(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()));
		int newId = Integer.parseInt((String) JOptionPane.showInputDialog(this, "Please enter the skill ID", "New Skill Requirement", JOptionPane.QUESTION_MESSAGE, null, null, 1));
		if (newId > 24) {
			JOptionPane.showMessageDialog(this, "Please revise your skill id, note they may not be over 24.");
			return;
		}
		id.getCacheDefinition().itemRequirements.put(newId, 0);
		//TODO: id.getSkillRequirementId().add(newId);
		//TODO: id.getSkillRequirementLvl().add(0);
		saveItem(id.getId(), false);
		try {
			loadItem(id.getId());
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_addNewActionPerformed

	private void skillReqTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_skillReqTableKeyTyped
	}//GEN-LAST:event_skillReqTableKeyTyped

	private void genStorePricesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genStorePricesItemActionPerformed
		try {
			repackFile();
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_genStorePricesItemActionPerformed

	private void addSkillReqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSkillReqButtonActionPerformed
		ItemDefinition id = ItemDefinition.forId(Integer.parseInt(itemTree.getLastSelectedPathComponent().toString()));
		int newId = Integer.parseInt((String) JOptionPane.showInputDialog(this, "Please enter the skill ID", "New Skill Requirement", JOptionPane.QUESTION_MESSAGE, null, null, 1));
		if (newId > 24) {
			JOptionPane.showMessageDialog(this, "Please revise your skill id, note they may not be over 24.");
			return;
		}
		id.getCacheDefinition().levelRequirements = new HashMap<Integer, Integer>();
		id.getCacheDefinition().levelRequirements.put(newId, 0);
		//TODO: id.setSkillRequirementId(new ArrayList<Integer>());
		//TODO: id.setSkillRequirementLvl(new ArrayList<Integer>());
		//TODO: id.getSkillRequirementId().add(newId);
		//TODO: id.getSkillRequirementLvl().add(0);
		saveItem(id.getId(), false);
		try {
			loadItem(id.getId());
		} catch (IOException ex) {
			Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_addSkillReqButtonActionPerformed

	@SuppressWarnings("unused")
	private void setItemNamesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setItemNamesButtonActionPerformed
		BufferedReader reader;
		String line;
		try {
			reader = new BufferedReader(new FileReader("data/item/item_names.txt"));
			while ((line = reader.readLine()) != null) {
				String[] args = line.split(",");
				int id = Integer.parseInt(args[0]);
				String name = args[1];
				ItemDefinition item = ItemDefinition.forId(id);
				if (item.getName().equals("")) {
					//item.setName(name);
				}
			}
			reader.close();
			repackFile();
		} catch (Exception e) {
		}
	}//GEN-LAST:event_setItemNamesButtonActionPerformed

	private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_nameFieldActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				new ItemDefEditor().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel actionsPanel;
	private javax.swing.JButton addExtraDefsButton;
	private javax.swing.JButton addNew;
	private javax.swing.JButton addSkillReqButton;
	private javax.swing.JPanel bonusPanel;
	private javax.swing.JScrollPane bonusScroll;
	private javax.swing.JTable bonusTable;
	private javax.swing.JPanel contentPanel;
	private javax.swing.JLabel defForLabel;
	private javax.swing.JButton deleteButton;
	private javax.swing.JMenuItem dumpDefs;
	private javax.swing.JTextField equipIdField;
	private javax.swing.JLabel equipIdLabel;
	private javax.swing.JTextField examineField;
	private javax.swing.JLabel examineLabel;
	private javax.swing.JLabel exchangeLabel;
	private javax.swing.JTextField exchangePriceField;
	private javax.swing.JPanel extraDefsEditPanel;
	private javax.swing.JPanel extraDefsPanel;
	private javax.swing.JScrollPane extraDefsScroll;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JMenuBar frameMenuBar;
	private javax.swing.JMenuItem genStorePricesItem;
	private javax.swing.JSeparator headerSeparator;
	private javax.swing.JTextField highAlchField;
	private javax.swing.JLabel highAlchLabel;
	private javax.swing.JLabel idLabel;
	private javax.swing.JPanel itemIdsPanel;
	private javax.swing.JLabel itemImage;
	private javax.swing.JPanel itemImagePanel;
	private javax.swing.JTree itemTree;
	private javax.swing.JTextField lowAlchField;
	private javax.swing.JLabel lowAlchLabel;
	private javax.swing.JTextField nameField;
	private javax.swing.JLabel nameLabel;
	private javax.swing.JPanel noExtraDefsPanel;
	private javax.swing.JPanel noSkillReq;
	@SuppressWarnings("rawtypes")
	private javax.swing.JComboBox notedCombo;
	private javax.swing.JLabel notedLabel;
	private javax.swing.JSeparator panelSeparator;
	private javax.swing.JLabel pictureLabel;
	private javax.swing.JTextField renderIdField;
	private javax.swing.JLabel renderIdLabel;
	private javax.swing.JButton repackButton;
	private javax.swing.JButton saveButton;
	private javax.swing.JButton saveRepackButton;
	private javax.swing.JLabel seachIdLabel;
	private javax.swing.JTextField searchIdField;
	private javax.swing.JTextField searchNameField;
	private javax.swing.JLabel searchNameLabel;
	private javax.swing.JMenuItem setItemNamesButton;
	private javax.swing.JPanel skillReqOption;
	private javax.swing.JPanel skillReqPanel;
	private javax.swing.JScrollPane skillReqScroll;
	private javax.swing.JTable skillReqTable;
	private javax.swing.JTextField slotField;
	private javax.swing.JLabel slotLabel;
	private javax.swing.JTextField speedField;
	private javax.swing.JLabel speedLabel;
	@SuppressWarnings("rawtypes")
	private javax.swing.JComboBox stackableCombo;
	private javax.swing.JLabel stackableLabel;
	private javax.swing.JLabel storeLabel;
	private javax.swing.JTextField currencyPriceField;
	@SuppressWarnings("rawtypes")
	private javax.swing.JComboBox tradeableCombo;
	private javax.swing.JLabel tradeableLabel;
	private javax.swing.JScrollPane treeScroller;
	private javax.swing.JTextField weightField;
	private javax.swing.JLabel weightLabel;
	// End of variables declaration//GEN-END:variables

	private void loadItem(int parsedInt) throws IOException {
		ItemDefinition id = ItemDefinition.forId(parsedInt);
		itemImage.setText("");
		 try {
            itemImage.setIcon(new ImageIcon(ImageIO.read(new URL("http://www.tip.it/runescape/item2/" + id.getName().replace(" ", "_") + ".gif"))));
        } catch (Exception e) {
            try {
                itemImage.setIcon(new ImageIcon(ImageIO.read(new URL("http://www.runehq.com/image/itemsdb/" + id.getName().replace(" ", "") + ".png"))));
            } catch (Exception ee) {
                try {
                    itemImage.setIcon(new ImageIcon(ImageIO.read(new URL("http://services.runescape.com/m=itemdb_rs/3243_obj_sprite.gif?id=" + id.getId()))));
                } catch (Exception ew) {
                    itemImage.setIcon(null);
                    itemImage.setText("Image unavaiable");
                }
            }
        }
		idLabel.setText(id.getName());
		nameField.setText(id.getName());
		equipIdField.setText(Integer.toString(id.getEquipId()));
		renderIdField.setText(Integer.toString(id.getCacheDefinition().getRenderAnimId()));
		if (id.isExtraDefinitions()) {
			addExtraDefsButton.setEnabled(false);
			((CardLayout) extraDefsPanel.getLayout()).show(extraDefsPanel, "Extra");
			examineField.setText(id.getExamine());
			//weightField.setText(Double.toString(id.getWeight()));
			slotField.setText(Integer.toString(id.getEquipmentSlot()));
			tradeableCombo.setSelectedItem(Boolean.toString(id.isTradable()));
			speedField.setText(Integer.toString(id.getAttackSpeed()));
			for (int i = 0; i < id.getBonus().length; i++) {
				bonusTable.setValueAt(id.getBonus()[i], 0, i);
			}
			highAlchField.setText(Integer.toString(id.getHighAlch()));
			lowAlchField.setText(Integer.toString(id.getLowAlch()));
			currencyPriceField.setText(Integer.toString(id.getStorePrice()));
			//TODO:exchangePriceField.setText(Integer.toString(id.getExchangePrice()));

		} else {
			((CardLayout) extraDefsPanel.getLayout()).show(extraDefsPanel, "None");
			addExtraDefsButton.setEnabled(true);
		}
		stackableCombo.setSelectedItem(Boolean.toString(id.isStackable()));
		notedCombo.setSelectedItem(Boolean.toString(id.isNoted()));
		if (id.getCacheDefinition().levelRequirements != null) {
			DefaultTableModel newModel = new DefaultTableModel();
			newModel.addTableModelListener(new TableModelListener() {

				@Override
				public void tableChanged(TableModelEvent e) {
					if (e.getColumn() != -1) {
						ItemDefinition.getDefinitions()[Integer.parseInt(itemTree.getLastSelectedPathComponent().toString())].getCacheDefinition().levelRequirements.put(e.getColumn(), Integer.parseInt((String) skillReqTable.getValueAt(0, e.getColumn())));

					}
				}
			});
			skillReqTable.setModel(newModel);
			((CardLayout) skillReqPanel.getLayout()).show(skillReqPanel, "Requires");
			for (int i = 0; i < id.getCacheDefinition().levelRequirements.size(); i++) {
				((javax.swing.table.DefaultTableModel) skillReqTable.getModel()).addColumn(i, new Integer[]{id.getCacheDefinition().levelRequirements.get(i)});
			}
		} else {
			((CardLayout) skillReqPanel.getLayout()).show(skillReqPanel, "None");
		}
	}

	public void saveItem(int id, boolean repack) {
		ItemDefinition item = ItemDefinition.forId(id);
		//ItemDefinition.getDefinitions()[id].setName(nameField.getText());
		ItemDefinition.getDefinitions()[id].setEquipId(Integer.parseInt(equipIdField.getText()));
		//TODO: ItemDefinition.getDefinitions()[id].setRenderId(Integer.parseInt(renderIdField.getText()));
		if (ItemDefinition.getDefinitions()[id].isExtraDefinitions()) {
			ItemDefinition.getDefinitions()[id].setExamine(examineField.getText());
			ItemDefinition.getDefinitions()[id].setWeight(Double.parseDouble(weightField.getText()));
			ItemDefinition.getDefinitions()[id].setEquipmentSlot(Integer.parseInt(slotField.getText()));
			ItemDefinition.getDefinitions()[id].setHighAlch(Integer.parseInt(highAlchField.getText()));
			ItemDefinition.getDefinitions()[id].setLowAlch(Integer.parseInt(lowAlchField.getText()));
			ItemDefinition.getDefinitions()[id].setStorePrice(Integer.parseInt(currencyPriceField.getText()));
			//TODO: ItemDefinition.getDefinitions()[id].setExchangePrice(Integer.parseInt(exchangePriceField.getText()));
			ItemDefinition.getDefinitions()[id].setTradable(Boolean.parseBoolean((String) tradeableCombo.getSelectedItem()));
			ItemDefinition.getDefinitions()[id].setAttackSpeed(Integer.parseInt(speedField.getText()));
			for (int i = 0; i < item.getBonus().length; i++) {
				ItemDefinition.getDefinitions()[id].setBonusAtIndex(i, (Integer) bonusTable.getValueAt(0, i));
			}
		}
		//ItemDefinition.getDefinitions()[id].setStackable(Boolean.parseBoolean((String) stackableCombo.getSelectedItem()));
		ItemDefinition.getDefinitions()[id].setNoted(Boolean.parseBoolean((String) notedCombo.getSelectedItem()));
		if (repack) {
			try {
				repackFile();
			} catch (IOException ex) {
				Logger.getLogger(ItemDefEditor.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}

	private void repackFile() throws IOException {//It doesnt now, but ill make a backup anyway.
		File f = new File("./data/item/itemDefinitions.bin");
		f.delete();
		RandomAccessFile raf = new RandomAccessFile("./data/item/itemDefinitions.bin", "rw");
		raf.writeShort(Cache.getAmountOfItems());
		for (int x = 0; x < Cache.getAmountOfItems(); x++) {
			ItemDefinition itemDef = ItemDefinition.forId(x);
			if (itemDef == null) {
				System.out.println(x);
				raf.writeShort(-1);
				continue;
			}
			raf.writeShort(x);
			raf.writeShort(itemDef.getEquipId());
			raf.writeShort(itemDef.getRenderAnimId());
			raf.writeBytes(itemDef.getName());
			raf.writeByte(0);
			raf.writeByte(itemDef.isExtraDefinitions() ? 1 : 0);
			if (itemDef.isExtraDefinitions()) {
				raf.writeBytes(itemDef.getExamine() != null ? itemDef.getExamine() : "It's a " + itemDef.getName());
				raf.writeByte(0);
				//raf.writeDouble(itemDef.getWeight());
				raf.writeByte(itemDef.getEquipmentSlot());
				raf.writeByte(itemDef.isTradable() ? 1 : 0);
				raf.writeByte(itemDef.getAttackSpeed());
				raf.writeByte(itemDef.getBonus() == null ? 0 : 1);
				if (itemDef.getBonus() != null) {
					for (int i = 0; i < 15; i++) {
						raf.writeShort(itemDef.getBonus()[i]);
					}
				}
				raf.writeByte(itemDef.getAbsorptionBonus() == null ? 0 : 1);
				if (itemDef.getAbsorptionBonus() != null) {
					for (int i = 0; i < 3; i++) {
						raf.writeShort(itemDef.getAbsorptionBonus()[i]);
					}
				}
				raf.writeInt(itemDef.getHighAlch());
				raf.writeInt(itemDef.getLowAlch());
				raf.writeInt(itemDef.getStorePrice());
				//TODO: raf.writeInt(itemDef.getExchangePrice());
			}
			raf.writeByte(itemDef.isStackable() ? 1 : 0);
			raf.writeByte(itemDef.isNoted() ? 1 : 0);
			raf.writeByte(itemDef.getCacheDefinition().levelRequirements != null ? 1 : 0);
			if (itemDef.getCacheDefinition().levelRequirements!= null) {
				raf.writeByte(itemDef.getCacheDefinition().levelRequirements.size());
				for (int skillIndex = 0; skillIndex < itemDef.getCacheDefinition().levelRequirements.size(); skillIndex++) {
					raf.writeByte(itemDef.getCacheDefinition().levelRequirements.get(skillIndex));
					if (itemDef.getCacheDefinition().levelRequirements.size() > skillIndex) {
						raf.writeByte(itemDef.getCacheDefinition().levelRequirements.get(skillIndex));
					} else {
						raf.writeByte(1);
					}
				}
			}
		}
		raf.close();
		//TODO: reload();
	}
}
